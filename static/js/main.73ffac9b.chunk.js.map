{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","buttonColor","setButtonColor","rRef","useRef","gRef","bRef","ref","type","placeholder","style","backgroundColor","onClick","rValue","current","value","gValue","bValue","r","parseInt","toString","g","b","result","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAkCeA,MAhCf,WAAgB,IAAD,EAE2BC,mBAAS,IAFpC,mBAEJC,EAFI,KAESC,EAFT,KAILC,EAAOC,mBACPC,EAAOD,mBACPE,EAAOF,mBAeb,OAEI,gCACI,uBAAOG,IAAKJ,EAAMK,KAAK,SAASC,YAAY,MAC5C,uBAAOF,IAAKF,EAAMG,KAAK,SAASC,YAAY,MAC5C,uBAAOF,IAAKD,EAAME,KAAK,SAASC,YAAY,MAC5C,wBAAQC,MAAO,CAACC,gBAAiBV,GAAcW,QAlBvD,WACI,IAAMC,EAASV,EAAKW,QAAQC,MACtBC,EAASX,EAAKS,QAAQC,MACtBE,EAASX,EAAKQ,QAAQC,MACtBG,EAAIC,SAASN,GAAQO,SAAS,IAC9BC,EAAIF,SAASH,GAAQI,SAAS,IAC9BE,EAAIH,SAASF,GAAQG,SAAS,IAE9BG,EAAM,WAAoB,IAAbL,EAAEM,OAAe,EAAIN,EAAIA,GAAhC,OAAiD,IAAbG,EAAEG,OAAe,EAAIH,EAAIA,GAA7D,OAA8E,IAAbC,EAAEE,OAAe,EAAIF,EAAIA,GACtGpB,EAAeqB,IASX,8BCjBGE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.73ffac9b.chunk.js","sourcesContent":["import React, {useRef, useState} from 'react';\n\nfunction App() {\n\n    const [buttonColor, setButtonColor] = useState(\"\")\n\n    const rRef = useRef()\n    const gRef = useRef()\n    const bRef = useRef()\n\n\n    function RGBtoHex() {\n        const rValue = rRef.current.value\n        const gValue = gRef.current.value\n        const bValue = bRef.current.value\n        const r = parseInt(rValue).toString(16)\n        const g = parseInt(gValue).toString(16)\n        const b = parseInt(bValue).toString(16)\n\n        const result = `#${r.length === 1 ? 0 + r : r}${g.length === 1 ? 0 + g : g}${b.length === 1 ? 0 + b : b}`\n        setButtonColor(result)\n    }\n\n    return (\n\n        <div>\n            <input ref={rRef} type=\"number\" placeholder=\"R\"/>\n            <input ref={gRef} type=\"number\" placeholder=\"G\"/>\n            <input ref={bRef} type=\"number\" placeholder=\"B\"/>\n            <button style={{backgroundColor: buttonColor}} onClick={RGBtoHex}>change color</button>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}